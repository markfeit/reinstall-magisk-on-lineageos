#! /bin/bash

set -e

cat <<EOF

THIS IS NO LONGER NECESSARY.

After upgrading, sideload Magisk as if it were a new installation.

EOF
exit 1

TMPBASE=$(mktemp -d)
cleanup() {
    rm -rf "${TMPBASE}"
}
trap cleanup EXIT


section() {
    printf "\n\n"
    echo "-----" "$@"
    printf "\n\n"
}


run_adb() {
    adb -s "$PHONE_ADB_SERIAL_NUMBER" "$@"
}

run_fastboot() {
    # TODO: My system requires root because udev isn't set up for the
    # phone.  Find a way to avoid the sudo automagically.
    sudo fastboot "$@"
}


wait_for() {
    WHAT=$1
    shift
    
    SECONDS=0
    PRINTED=false
    while ! "$@"
    do
	if [ "$SECONDS" -eq 0 ]
	then
	    printf "Waiting for ${WHAT}."
	    PRINTED=true
	fi

        if ((SECONDS > 60)); then
            echo ' Giving up.' 1>&2
            exit 2
        fi

        printf '.'
        sleep 2
    done

    if ${PRINTED}
    then
	echo
    fi

}



# This is invisible inside functions.
FIRSTARG="$1"

determine_device_serial_number() {
    # If a serial number was specified on the command line, use it.
    if [ -n "$FIRSTARG" ]
    then
	PHONE_ADB_SERIAL_NUMBER="$FIRSTARG"
	return
    fi
    
    DEVLIST="${TMPBASE}/devlist"

    adb devices | awk '$2 == "device" { print $1 }' > "${DEVLIST}"
    case $(wc -l "${DEVLIST}" | awk '{ print $1 }') in
	0)
	    echo "ERROR: No devices connected." 1>&2
	    exit 1
	    ;;
	1)
	    PHONE_ADB_SERIAL_NUMBER=$(cat "${DEVLIST}")
	    ;;
	*)
	    echo "ERROR: Multiple devices connected.  Specify one on the command line:" 1>&2
	    sed -e 's/^/    /' "${DEVLIST}"
	    exit 1
	    ;;
    esac
}

    

check_phone_is_connected() {
    if ! adb devices | grep --silent "$PHONE_ADB_SERIAL_NUMBER"; then
        echo "ERROR: device '${PHONE_ADB_SERIAL_NUMBER}' is not connected" 1>&2
        exit 1
    fi
}

check_phone_is_in_fastboot_mode() {
    run_fastboot devices | grep --silent "$PHONE_ADB_SERIAL_NUMBER"
}


extract_boot_image_on_phone() {
    section Extracting boot image
    enable_adb_root_access

    # TODO: The nicer way to do this is 'bootctl get-suffix $(bootctl
    # get-current-slot)', but not all versions of Android have that
    # yet.  This is more portable.
    BOOT_SUFFIX=$(run_adb shell getprop ro.boot.slot_suffix )

    if [ -n "${BOOT_SUFFIX}" ]
    then
	echo "Multi-slot phone is on slot" \
	     $(echo "$BOOT_SUFFIX" | sed -e 's/^_//' | tr 'a-z' 'A-Z')
    fi

    PHONE_DOWNLOAD_DIR="/sdcard/Download"
    if ! run_adb shell test -d "${PHONE_DOWNLOAD_DIR}" -a -w "${PHONE_DOWNLOAD_DIR}"
    then
	echo "Unable to find/write to ${PHONE_DOWNLOAD_DIR}"
	exit 1
    fi
    
    UNPATCHED_IMAGE="${PHONE_DOWNLOAD_DIR}/lineage-upgrade-boot.img"
    run_adb shell rm -rf "${UNPATCHED_IMAGE}"
    run_adb shell dd "if=/dev/block/by-name/boot${BOOT_SUFFIX}" "of=${UNPATCHED_IMAGE}"
}


patch_boot_image_on_phone() {
    section Patching boot image
    ADB_MAGISK="/data/adb/magisk"
    run_adb shell "${ADB_MAGISK}/boot_patch.sh" "${UNPATCHED_IMAGE}"
    PATCHED_IMAGE="/sdcard/Download/lineage-upgrade-boot-patched.img"
    run_adb shell rm -rf "${UNPATCHED_IMAGE}"
    run_adb shell mv "${ADB_MAGISK}/new-boot.img" "${PATCHED_IMAGE}"
}

transfer_patched_boot_image_to_pc() {
    section Downloading patched image
    PATCHED_IMAGE_LOCAL="${TMPBASE}/patched.img"
    run_adb pull "${PATCHED_IMAGE}" "${PATCHED_IMAGE_LOCAL}"
}


wait_for_phone_to_be_in_adb() {
    wait_for ADB run_adb shell true 2>/dev/null
}


flash_patched_boot_image() {
    section Flashing patched boot image
    run_adb reboot bootloader
    wait_for "bootloader" check_phone_is_in_fastboot_mode
    # TODO: check if sudo is neded; udev may have been set up.
    run_fastboot -s "$PHONE_ADB_SERIAL_NUMBER" flash boot "${PATCHED_IMAGE_LOCAL}"
    run_fastboot -s "$PHONE_ADB_SERIAL_NUMBER" reboot
}


test_adb_root_access() {
    if run_adb shell test -w /proc
    then
	return 0
    else
	return 1
    fi
}

enable_adb_root_access() {

    wait_for_phone_to_be_in_adb
    
    if test_adb_root_access
    then
	return 0
    fi

    run_adb root

     # This doesn't happen instantly after rooting.
    wait_for_phone_to_be_in_adb

    if ! test_adb_root_access
    then
	echo "ADB failed to go into root mode." 1>&2
	exit 1
    fi
}

cleanup_leftovers() {
    section Cleaning up  "${PHONE_DOWNLOAD_DIR}" on phone
    enable_adb_root_access
    wait_for "SD card" run_adb shell test -d "${PHONE_DOWNLOAD_DIR}"
    run_adb shell rm -rf "${UNPATCHED_IMAGE}" "${PATCHED_IMAGE}"
}

main() {
    determine_device_serial_number
    check_phone_is_connected
    extract_boot_image_on_phone
    patch_boot_image_on_phone
    transfer_patched_boot_image_to_pc
    flash_patched_boot_image
    cleanup_leftovers
    section "Magisk is reinstalled."
}

# Run the main only when this file is executed as script, to help with testing.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
